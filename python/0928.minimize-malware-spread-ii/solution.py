# Created by Jones at 2024/04/17 19:27
# leetgo: 1.4.5
# https://leetcode.cn/problems/minimize-malware-spread-ii/

from typing import *
from leetgo_py import *

from bisect import bisect_left, bisect_right
from collections import Counter, defaultdict, deque
from copy import deepcopy
from functools import cache, cmp_to_key, lru_cache, reduce
from heapq import heapify, heappop, heappush, heappushpop, heapreplace
from itertools import accumulate, chain, count, pairwise, zip_longest
from math import ceil, comb, floor, gcd, inf, isqrt, log2, perm, sqrt
from operator import xor
from pprint import pprint
from string import ascii_lowercase
from typing import List, Optional

# @lc code=begin


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial) == 1:
            return initial[0]
        n = len(graph)
        g = [[] for _ in range(n)]

        for i, row in enumerate(graph):
            for j in range(i + 1, n):
                if row[j]:
                    g[i].append(j)
                    g[j].append(i)

        vis = [False] * n

        # node, cnt = None, 0  # remove node can make `cnt` nodes not be affected
        can = set(initial)
        res = [0] * n
        for x in range(n):
            if vis[x] or x in can:
                continue
            s = set()
            ban = set()

            def dfs(x):
                if x in can:
                    ban.add(x)
                    return
                if not vis[x]:
                    vis[x] = True
                    s.add(x)
                    for y in g[x]:
                        dfs(y)

            dfs(x)
            if len(ban) == 0:
                continue

            if len(ban) == 1:
                res[ban.pop()] += len(s)

        mx = max(res)
        if mx == 0:
            return min(can)

        return res.index(max(res))


# @lc code=end

if __name__ == "__main__":
    graph: List[List[int]] = deserialize("List[List[int]]", read_line())
    initial: List[int] = deserialize("List[int]", read_line())
    ans = Solution().minMalwareSpread(graph, initial)
    print("\noutput:", serialize(ans, "integer"))
