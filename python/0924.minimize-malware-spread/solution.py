# Created by Jones at 2024/04/16 15:12
# leetgo: 1.4.5
# https://leetcode.cn/problems/minimize-malware-spread/

from typing import *
from leetgo_py import *

from bisect import bisect_left, bisect_right
from collections import Counter, defaultdict, deque
from copy import deepcopy
from functools import cache, cmp_to_key, lru_cache, reduce
from heapq import heapify, heappop, heappush, heappushpop, heapreplace
from itertools import accumulate, chain, count, pairwise, zip_longest
from math import ceil, comb, floor, gcd, inf, isqrt, log2, perm, sqrt
from operator import xor
from pprint import pprint
from string import ascii_lowercase
from typing import List, Optional

# @lc code=begin


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial) == 1:
            return initial[0]
        n = len(graph)
        g = [[] for _ in range(n)]

        for i, row in enumerate(graph):
            for j, x in enumerate(row):
                if x:
                    g[i].append(j)

        node = None
        cnt = inf

        def bfs(q: deque[int]):
            vis = [False] * n
            cnt = 0
            while q:
                x = q.popleft()
                if vis[x]:
                    continue
                cnt += 1
                vis[x] = True
                for y in g[x]:
                    if not vis[y]:
                        q.append(y)
            return cnt

        q = deque(initial)
        for _ in range(n):
            x = q.popleft()  # remove the first node
            res = bfs(q.copy())
            q.append(x)
            if res < cnt or (res == cnt and x < node):
                cnt = res
                node = x
        return node


# @lc code=end

if __name__ == "__main__":
    graph: List[List[int]] = deserialize("List[List[int]]", read_line())
    initial: List[int] = deserialize("List[int]", read_line())
    ans = Solution().minMalwareSpread(graph, initial)
    print("\noutput:", serialize(ans, "integer"))
